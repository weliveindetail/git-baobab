#!/usr/bin/env python3

import argparse
import hashlib
import os
import os.path
import re
import subprocess
import sys
import tempfile
import webbrowser

all_languages = [
  [ "actionscript", [ "as", "mxml" ] ],
  [ "ada", [ "ada", "adb", "ads" ] ],
  [ "asciidoc", [ "adoc", "ad", "asc", "asciidoc" ] ],
  [ "apl", [ "apl" ] ],
  [ "asm", [ "asm", "s" ] ],
  [ "asp", [ "asp", "asa", "aspx", "asax", "ashx", "ascx", "asmx" ] ],
  [ "aspx", [ "asp", "asa", "aspx", "asax", "ashx", "ascx", "asmx" ] ],
  [ "batch", [ "bat", "cmd" ] ],
  [ "bitbake", [ "bb", "bbappend", "bbclass", "inc" ] ],
  [ "bro", [ "bro", "bif" ] ],
  [ "cc", [ "c", "h", "xs" ] ],
  [ "cfmx", [ "cfc", "cfm", "cfml" ] ],
  [ "chpl", [ "chpl" ] ],
  [ "clojure", [ "clj", "cljs", "cljc", "cljx" ] ],
  [ "coffee", [ "coffee", "cjsx" ] ],
  [ "config", [ "config" ] ],
  [ "coq", [ "coq", "g", "v" ] ],
  [ "cpp", [ "cpp", "cc", "C", "cxx", "m", "hpp", "hh", "h", "H", "hxx", "tpp" ] ],
  [ "crystal", [ "cr", "ecr" ] ],
  [ "csharp", [ "cs" ] ],
  [ "cshtml", [ "cshtml" ] ],
  [ "css", [ "css" ] ],
  [ "cython", [ "pyx", "pxd", "pxi" ] ],
  [ "delphi", [ "pas", "int", "dfm", "nfm", "dof", "dpk", "dpr", "dproj", "groupproj", "bdsgroup", "bdsproj" ] ],
  [ "dlang", [ "d", "di" ] ],
  [ "dot", [ "dot", "gv" ] ],
  [ "dts", [ "dts", "dtsi" ] ],
  [ "ebuild", [ "ebuild", "eclass" ] ],
  [ "elisp", [ "el" ] ],
  [ "elixir", [ "ex", "eex", "exs" ] ],
  [ "elm", [ "elm" ] ],
  [ "erlang", [ "erl", "hrl" ] ],
  [ "factor", [ "factor" ] ],
  [ "fortran", [ "f", "F", "f77", "f90", "F90", "f95", "f03", "for", "ftn", "fpp", "FPP" ] ],
  [ "fsharp", [ "fs", "fsi", "fsx" ] ],
  [ "gettext", [ "po", "pot", "mo" ] ],
  [ "glsl", [ "vert", "tesc", "tese", "geom", "frag", "comp" ] ],
  [ "go", [ "go" ] ],
  [ "groovy", [ "groovy", "gtmpl", "gpp", "grunit", "gradle" ] ],
  [ "haml", [ "haml" ] ],
  [ "handlebars", [ "hbs" ] ],
  [ "haskell", [ "hs", "hsig", "lhs" ] ],
  [ "haxe", [ "hx" ] ],
  [ "hh", [ "h" ] ],
  [ "html", [ "htm", "html", "shtml", "xhtml" ] ],
  [ "idris", [ "idr", "ipkg", "lidr" ] ],
  [ "ini", [ "ini" ] ],
  [ "ipython", [ "ipynb" ] ],
  [ "isabelle", [ "thy" ] ],
  [ "j", [ "ijs" ] ],
  [ "jade", [ "jade" ] ],
  [ "java", [ "java", "properties" ] ],
  [ "jinja2", [ "j2" ] ],
  [ "js", [ "es6", "js", "jsx", "vue" ] ],
  [ "json", [ "json" ] ],
  [ "jsp", [ "jsp", "jspx", "jhtm", "jhtml", "jspf", "tag", "tagf" ] ],
  [ "julia", [ "jl" ] ],
  [ "kotlin", [ "kt" ] ],
  [ "less", [ "less" ] ],
  [ "liquid", [ "liquid" ] ],
  [ "lisp", [ "lisp", "lsp" ] ],
  [ "log", [ "log" ] ],
  [ "lua", [ "lua" ] ],
  [ "m4", [ "m4" ] ],
  [ "make", [ "Makefiles", "mk", "mak" ] ],
  [ "mako", [ "mako" ] ],
  [ "markdown", [ "markdown", "mdown", "mdwn", "mkdn", "mkd", "md" ] ],
  [ "mason", [ "mas", "mhtml", "mpl", "mtxt" ] ],
  [ "matlab", [ "m" ] ],
  [ "mathematica", [ "m", "wl" ] ],
  [ "md", [ "markdown", "mdown", "mdwn", "mkdn", "mkd", "md" ] ],
  [ "mercury", [ "m", "moo" ] ],
  [ "naccess", [ "asa", "rsa" ] ],
  [ "nim", [ "nim" ] ],
  [ "nix", [ "nix" ] ],
  [ "objc", [ "m", "h" ] ],
  [ "objcpp", [ "mm", "h" ] ],
  [ "ocaml", [ "ml", "mli", "mll", "mly" ] ],
  [ "octave", [ "m" ] ],
  [ "org", [ "org" ] ],
  [ "parrot", [ "pir", "pasm", "pmc", "ops", "pod", "pg", "tg" ] ],
  [ "pdb", [ "pdb" ] ],
  [ "perl", [ "pl", "pm", "pm6", "pod", "t" ] ],
  [ "php", [ "php", "phpt", "php3", "php4", "php5", "phtml" ] ],
  [ "pike", [ "pike", "pmod" ] ],
  [ "plist", [ "plist" ] ],
  [ "plone", [ "pt", "cpt", "metadata", "cpy", "py", "xml", "zcml" ] ],
  [ "powershell", [ "ps1" ] ],
  [ "proto", [ "proto" ] ],
  [ "ps1", [ "ps1" ] ],
  [ "pug", [ "pug" ] ],
  [ "puppet", [ "pp" ] ],
  [ "python", [ "py" ] ],
  [ "qml", [ "qml" ] ],
  [ "racket", [ "rkt", "ss", "scm" ] ],
  [ "rake", [ "Rakefile" ] ],
  [ "razor", [ "cshtml" ] ],
  [ "restructuredtext", [ "rst" ] ],
  [ "rs", [ "rs" ] ],
  [ "r", [ "r", "R", "Rmd", "Rnw", "Rtex", "Rrst" ] ],
  [ "rdoc", [ "rdoc" ] ],
  [ "ruby", [ "rb", "rhtml", "rjs", "rxml", "erb", "rake", "spec" ] ],
  [ "rust", [ "rs" ] ],
  [ "salt", [ "sls" ] ],
  [ "sass", [ "sass", "scss" ] ],
  [ "scala", [ "scala" ] ],
  [ "scheme", [ "scm", "ss" ] ],
  [ "shell", [ "sh", "bash", "csh", "tcsh", "ksh", "zsh", "fish" ] ],
  [ "smalltalk", [ "st" ] ],
  [ "sml", [ "sml", "fun", "mlb", "sig" ] ],
  [ "sql", [ "sql", "ctl" ] ],
  [ "stata", [ "do", "ado" ] ],
  [ "stylus", [ "styl" ] ],
  [ "swift", [ "swift" ] ],
  [ "tcl", [ "tcl", "itcl", "itk" ] ],
  [ "terraform", [ "tf", "tfvars" ] ],
  [ "tex", [ "tex", "cls", "sty" ] ],
  [ "thrift", [ "thrift" ] ],
  [ "tla", [ "tla" ] ],
  [ "tt", [ "tt", "tt2", "ttml" ] ],
  [ "toml", [ "toml" ] ],
  [ "ts", [ "ts", "tsx" ] ],
  [ "twig", [ "twig" ] ],
  [ "vala", [ "vala", "vapi" ] ],
  [ "vb", [ "bas", "cls", "frm", "ctl", "vb", "resx" ] ],
  [ "velocity", [ "vm", "vtl", "vsl" ] ],
  [ "verilog", [ "v", "vh", "sv", "svh" ] ],
  [ "vhdl", [ "vhd", "vhdl" ] ],
  [ "vim", [ "vim" ] ],
  [ "wix", [ "wxi", "wxs" ] ],
  [ "wsdl", [ "wsdl" ] ],
  [ "wadl", [ "wadl" ] ],
  [ "xml", [ "xml", "dtd", "xsl", "xslt", "xsd", "ent", "tld", "plist", "wsdl" ] ],
  [ "yaml", [ "yaml", "yml" ] ]
]


def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

def die(msg):
  eprint(msg)
  sys.exit(1)


d3js_default = 'https://d3js.org/d3.v5.min.js'
md5js_default = 'https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js'
baobabjs_default = 'https://weliveindetail.github.io/git-baobab/baobab-static.v0.2.min.js'
baobabcss_default = 'https://weliveindetail.github.io/git-baobab/baobab-static.v0.2.css'

parser = argparse.ArgumentParser(
  description='git baobab: explore changes in a sunburst chart')
parser.add_argument('since', metavar='since', type=str,
  help='The git commit to start the analysis from')
parser.add_argument('-size', metavar='100%%', type=str, default='100%',
  help='Display size of the resulting image as CSS length value')
parser.add_argument('-filter', metavar='.*', type=str,
  help='Add the given regex to the file filter')
parser.add_argument('-exclude', metavar='^$', type=str,
  help='Exclude matching files from the file filter')

langs = parser.add_argument_group('include files with extensions')

for lang in all_languages:
  langs.add_argument('--' + lang[0],
    dest='requested_language_ids', action='append_const', const=lang[0],
    help=', '.join(lang[1]))

# CMake is more complicated
langs.add_argument('--cmake',
  dest='requested_language_cmake', action='store_const', const=True,
  help='cmake, in (and CMakeLists.txt files)')

artifacts = parser.add_argument_group('customize artifacts')

artifacts.add_argument('-d3js', type=str, metavar=d3js_default, default=d3js_default,
  help='URL to custom d3js variant (tested with v5)')
artifacts.add_argument('-md5js', type=str, metavar=md5js_default, default=md5js_default,
  help='URL to custom script that provides a `md5()` function (for GitHub integration)')
artifacts.add_argument('-baobabjs', type=str, metavar=baobabjs_default, default=baobabjs_default,
  help='URL to custom baobab-static.js')
artifacts.add_argument('-baobabcss', type=str, metavar=baobabcss_default, default=baobabcss_default,
  help='URL to custom baobab-static.css')

args = parser.parse_args()

if (args.filter):
  # Use custom regex and potential lang extensions
  if (args.requested_language_cmake):
    file_search_regex = '({0})(.*CMakeLists.txt|.*\.(cmake|in))$'.format(args.filter)
  else:
    file_search_regex = '({0})'.format(args.filter)
else:
  # Use potential lang extensions or match all
  if (args.requested_language_cmake):
    file_search_regex = '(CMakeLists.txt$)|(.*\.(cmake|in)$)'
  else:
    file_search_regex = ''

# Append regex's for requested languages
if args.requested_language_ids:
  for lang in args.requested_language_ids:
    suffixes = next((x[1] for x in all_languages if x[0] == lang), None)
    if (suffixes):
      file_search_regex += '.*\.(' + '|'.join(suffixes) + ')$'
    else:
      die('Error: undefined language specifier "' + lang +
          '" should have been caught in ArgumentParser.')

if args.exclude:
  file_exclude_regex = args.exclude
else:
  file_exclude_regex = '^$' # never matches

baobabIncludePattern = re.compile(file_search_regex, re.IGNORECASE)
baobabExcludePattern = re.compile(file_exclude_regex, re.IGNORECASE)
baobabFileSizeCap = 1024 * 1024 * 8 # MB


### printStatus() ###

printStatusLastBanner = ''
def printStatusBanner(banner):
  global printStatusLastBanner
  if banner != printStatusLastBanner:
    printStatusLastBanner = banner
    print('\033[K' + banner, end='\r', flush=True)

printStatusLastPos = -2
def printStatus(banner, relname):
  global printStatusLastPos
  pos = relname.find(os.sep)
  if pos != printStatusLastPos:
    printStatusLastPos = pos
    subdir = relname[:pos] if pos >= 0 else '.'
    print('\033[K' + banner + ': ' + subdir, end='\r', flush=True)


### git() ###

dev_null = open(os.devnull, 'w')
def git(*cmd):
  p = subprocess.Popen(['git'] + list(cmd), cwd=os.getcwd(),
                       stdout=subprocess.PIPE, stderr=dev_null,
                       stdin=subprocess.PIPE, universal_newlines=True)
  stdout, stderr = p.communicate()
  stdout = stdout.rstrip('\r\n')
  return stdout


### populateBaobab() ###

def lineCountToday(relname):
  count = 0
  blockSize = 4096
  with open(relname, 'rb') as f:
    while 1:
      buffer = f.read(blockSize)
      if not buffer: break
      try:
        count += buffer.decode().count('\n')
      except UnicodeDecodeError:
        # Ignore blocks with invalid unicode characters
        continue
      except:
        die("Error:", sys.exc_info()[0])
  return count

def createRecord(n):
  return { 'name': n, 'modified': 0, 'today': 0, 'children': {} }

def enterSubRecord(record, child):
  if child not in record['children']:
    relname = record['name'] + os.sep + child
    record['children'][child] = createRecord(relname)
  return record['children'][child]

def initPathRecords(record, relname):
  for part in relname.split(os.sep):
    record = enterSubRecord(record, part)
  record['today'] = lineCountToday(relname)
  return record['today']

def baobabInclude(relname):
  if (relname):
    if baobabIncludePattern.search(relname):
      if not baobabExcludePattern.search(relname):
        return True
  return False

def populateBaobab(hashHead):
  lstree = git('ls-tree', '--name-only', '-z', '-r', hashHead)
  trackedFiles = lstree.split('\0')

  baobab = createRecord('.')
  matchedFiles = 0
  linesTodayTotal = 0

  for relname in trackedFiles:
    printStatus('Traversing', relname)
    if (baobabInclude(relname)):
      if (os.path.isfile(relname)):
        matchedFiles += 1
        if (os.path.getsize(relname) < baobabFileSizeCap):
          linesTodayTotal += initPathRecords(baobab, relname)
      else:
        print('No file: ' + relname)

  print('Filter matches {0} tracked files'.format(matchedFiles))
  return baobab, linesTodayTotal


### countModifications() ###

def parseStatLine(s):
  parts = s.split()
  if (not '=>' in s):
    # path/to/file.ext  |  123 +-
    return parts[0], parts[2]
  elif (not '{' in s):
    # old/path/to/file.ext => new/path/to/file.ext  |  123 +-
    return parts[2], parts[4]
  else:
    # path/to/{old-dir => new-dir}/file.ext  |  123 +-
    relname = parts[0][:parts[0].index('{')] + parts[2].replace('}', '')
    return relname, parts[4]

def addToRecord(root, relname, lines):
  record = root
  for part in relname.split(os.sep):
    if not part in record['children']:
      # Deleted during period of interest, check filter now
      if not baobabInclude(relname):
        return 0
    record = enterSubRecord(record, part)
  record['modified'] += lines
  return lines

def countModifications(baobab):
  printStatusBanner('Fetching stats')
  stat = git('diff', '--color=never', '--stat=5000,4900', args.since + '..HEAD')
  statLines = stat.split('\n')[:-1] # Skip last stat line (summary)
  linesModifiedTotal = 0

  for s in statLines:
    relname, lines = parseStatLine(s)
    printStatus('Counting changes', relname)
    if (lines.isdigit()):
      linesModifiedTotal += addToRecord(baobab, relname, int(lines))

  return baobab, linesModifiedTotal


### renderHtml() ###

def indent(depth):
  return depth * '  ' if (depth > 0) else ''

def nodeAttributes(node):
  return 'n: "{0}", m: {1}, t: {2}'.format(
          os.path.basename(node['name']), node['modified'], node['today'])

def writeChildNodes(node, outs, prefix, depth):
  # Avoid goddamn trailling comma on last item
  isBegin = True
  for name, child in node['children'].items():
    prefix = '\n' if isBegin else ',\n'
    if writeNodeData(child, outs, prefix, depth + 1):
      isBegin = False
  outs.write('\n')

def writeNodeData(node, outs, prefix='', depth=0):
  if (node['modified'] == 0):
    return False # skipped
  else:
    outs.write(prefix + indent(depth) + '{')
    outs.write(nodeAttributes(node))
    if node['children'].keys():
      outs.write(', children: [')
      writeChildNodes(node, outs, prefix, depth)
      outs.write('{0}]'.format(indent(depth)))
    outs.write('}')
    return True

def jsPreprocessor():
  curlyOpen = re.compile(r'{')
  curlyClose = re.compile(r'}')
  customKeys = re.compile(r'\${{(.*?)}}')
  def jspp(s):
      s = curlyOpen.sub(r'{{', s)
      s = curlyClose.sub(r'}}', s)
      return customKeys.sub(r'{\1}', s)
  return jspp

headerHtml = """
<!DOCTYPE html>
<meta charset="utf-8">
<link rel="stylesheet" type="text/css" href="${css}">
<style>
svg {
  width: ${width};
  height: ${height};
}
</style>
"""

showOnGithubHtml = """
<script>
  function showOnGithub(d) {
    const url = "https://${github_remote}/compare/${sha_from}..${sha_to}#diff-";
    const relPath = concatPath(d).slice(${root_name_len} + 1); // account for slash
    window.open(url + md5(relPath), '_blank');
  }

  baobab.arcShapes
    .filter(d => !d.children)
    .style("cursor", "pointer")
    .on("click", d => showOnGithub(d));
</script>
"""

rootInfoLabelJs = """
  baobab.${name} = baobab.canvas.append("text")
    .datum(root)
    .attr("pointer-events", "${pointer_events}")
    .attr("dy", "${dy}")
    .attr("fill", "${fill}")
    .attr("text-anchor", "middle")
    .attr("font-family", "sans-serif")
    .style("font-size", "1.6px")
    .text("${text}");
""";


parse_remote_github = re.compile(r'^.*\w.*(github\.com/.*/.*)(\.git)? \(fetch\)')
def parseRemoteGithub():
  remotes_string = git('remote', '-v')
  remotes_lines = remotes_string.split('\n')
  for s in remotes_lines:
    res = parse_remote_github.search(s)
    if (res):
      return res.group(1)
  return ''

def renderHtml(baobab, hashSince, hashHead):
  outs = tempfile.NamedTemporaryFile(mode='w', encoding='utf8', suffix='.html', delete=False)
  print('Export chart to {0}'.format(outs.name))

  jspp = jsPreprocessor()
  outs.write(jspp(headerHtml).format(width=args.size, height=args.size, css=args.baobabcss))
  outs.write('<body>\n')
  outs.write('<svg id=\"baobab\"></svg>\n')
  outs.write('<p>git baobab {0}</p>\n'.format(" ".join(sys.argv[1:])))

  outs.write('<script src="{0}"></script>\n'.format(args.d3js))
  outs.write('<script>\n')
  outs.write('const baobab_data = ');
  writeNodeData(baobab, outs)
  outs.write(';\n')
  outs.write('</script>\n')
  outs.write('<script src="{0}"></script>\n'.format(args.baobabjs))

  infoLabel = jspp(rootInfoLabelJs)
  outs.write('<script>')
  outs.write(infoLabel.format(
    name='rootLabelCommitRange', fill='#333', dy='1.6px', pointer_events='all',
    text='{0}..{1}'.format(hashSince[:12], hashHead[:12])))
  outs.write(infoLabel.format(
    name='rootLabelLinesModified', fill='#aaa', dy='6.1px', pointer_events='none',
    text='{0} lines inserted / deleted'.format(baobab['modified'])))
  outs.write(infoLabel.format(
    name='rootLabelLinesToday', fill='#aaa', dy='8.6px', pointer_events='none',
    text='{0} lines today'.format(baobab['today'])))
  outs.write('</script>\n')

  githubUrl = parseRemoteGithub()
  if githubUrl:
    outs.write('<script src="{0}"></script>'.format(args.md5js))
    outs.write(jspp(showOnGithubHtml).format(
      github_remote=githubUrl, sha_from=hashSince, sha_to=hashHead,
      root_name_len=len(baobab['name'])
    ))

  outs.write('</body>\n')
  outs.close()
  return outs.name


### main() ###

def sumUp(node):
  if node['children'].keys():
    assert node['today'] == 0
    assert node['modified'] == 0
    for name, child in node['children'].items():
      childToday, childModified = sumUp(child)
      node['today'] += childToday
      node['modified'] += childModified
  return node['today'], node['modified']


if __name__ == '__main__':
  absname = git('rev-parse', '--show-toplevel')
  if absname != os.getcwd():
    die('Error: working directory is not the repository root')

  hashSince = git('rev-parse', args.since)
  if not hashSince.startswith(args.since):
    die('Error: cannot find commit {0}'.format(args.since))

  hashHead = git('rev-parse', 'HEAD')
  print('Commits {0}..{1}'.format(hashSince[:12], hashHead[:12]))

  baobab, linesTodayTotal = populateBaobab(hashHead)
  baobab, linesModifiedTotal = countModifications(baobab)
  baobab['name'] = absname[absname.rindex(os.sep)+1:]

  sumToday, sumModified = sumUp(baobab)
  assert(sumToday == linesTodayTotal)
  assert(sumModified == linesModifiedTotal)

  print('{0} lines today, {1} lines changed'.format(
        linesTodayTotal, linesModifiedTotal))

  htmlFileName = renderHtml(baobab, hashSince, hashHead)
  if input('Show in browser? [Y/n] ') != 'n':
    webbrowser.open('file://' + htmlFileName)
